import type {
  DefaultSharedCoreModuleContext,
  LangiumCoreServices,
  LangiumSharedCoreServices,
  Module,
  PartialLangiumCoreServices,
} from 'langium';
import {
  EmptyFileSystem,
  createDefaultCoreModule,
  createDefaultSharedCoreModule,
  inject,
} from 'langium';

import { CommonValueConverter } from '../common/valueConverter.js';
import { MermaidGeneratedSharedModule, FileTreeGeneratedModule } from '../generated/module.js';
import { FileTreeTokenBuilder } from './tokenBuilder.js';

/**
 * Declaration of `FileTree` services.
 */
interface FileTreeAddedServices {
  parser: {
    TokenBuilder: FileTreeTokenBuilder;
    ValueConverter: CommonValueConverter;
  };
}

/**
 * Union of Langium default services and `FileTree` services.
 */
export type FileTreeServices = LangiumCoreServices & FileTreeAddedServices;

/**
 * Dependency injection module that overrides Langium default services and
 * contributes the declared `FileTree` services.
 */
export const FileTreeModule: Module<
  FileTreeServices,
  PartialLangiumCoreServices & FileTreeAddedServices
> = {
  parser: {
    TokenBuilder: () => new FileTreeTokenBuilder(),
    ValueConverter: () => new CommonValueConverter(),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 * @param context - Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createFileTreeServices(context: DefaultSharedCoreModuleContext = EmptyFileSystem): {
  shared: LangiumSharedCoreServices;
  FileTree: FileTreeServices;
} {
  const shared: LangiumSharedCoreServices = inject(
    createDefaultSharedCoreModule(context),
    MermaidGeneratedSharedModule
  );
  const FileTree: FileTreeServices = inject(
    createDefaultCoreModule({ shared }),
    FileTreeGeneratedModule,
    FileTreeModule
  );
  shared.ServiceRegistry.register(FileTree);
  return { shared, FileTree };
}
